<?php

/**
 * @file
 * Contains google_calendar.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\google_calendar\Entity\GoogleCalendar;

/**
 * Implements hook_help().
 */
function google_calendar_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the google_calendar module.
    case 'help.page.google_calendar':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides an extensible integration with Google Calendar') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 *
 * Queues calendars for import.
 */
function google_calendar_cron() {
  $queue = \Drupal::queue('google_calendar_import_processor');

  $query = \Drupal::entityManager()
    ->getStorage('google_calendar')
    ->getQuery()
    ->condition('status', 1);

  $calendarIds = $query->execute();

  $foundCalendars = GoogleCalendar::loadMultiple($calendarIds);
  foreach ($foundCalendars as $calendar) {
    $queue->createItem($calendar);
  }
}

/**
 * Implements hook_entity_operation_alter().
 *
 * Adds the import action to the operations links.
 */
function google_calendar_entity_operation_alter(&$operations, EntityInterface $entity) {
  $info = $entity->getEntityType();

  switch ($info->id()){
    case 'google_calendar':
      $operations['import'] = array(
        'title' => t('Import Events'),
        'weight' => 15,
        'url' => Url::fromRoute("google_calendar.import", array(
          'google_calendar' => $entity->id(),
        )),
      );
  }
  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Makes the fields imported from google calendar read only.
 */
function google_calendar_form_google_calendar_event_edit_form_alter(&$form, FormStateInterface $form_state, $form_id){

  $read_only = [
    'name',
    'location',
    'calendar',
    'description',
    'start_date',
    'end_date'
  ];

  // These fields should be read-only
  foreach($read_only as $field){
    $form[$field]['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
  }
  // Extra for description field
  $form['description']['widget'][0]['#attributes']['readonly'] = 'readonly';
}
